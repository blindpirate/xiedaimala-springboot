<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mybatis.example.BlogMapper">
    <select id="selectBlog" resultMap="blog">
        SELECT
        blog.id as blog_id,
        blog.title as blog_title,
        blog.description as blog_description,
        blog.content as blog_conent,
        blog.updated_at as blog_updated_at,
        blog.created_at as blog_created_at,
        blog.at_index as blog_at_index,
        user.id as user_id,
        user.username as user_username,
        user.avatar as user_avatar,
        user.updated_at as user_updated_at,
        user.created_at as user_created_at
        FROM blog
        LEFT OUTER JOIN user
        ON blog.user_id = user.id
        where
        <if test="user_id != null">
            blog.user_id = #{user_id} and
        </if>
        blog.at_index = #{atIndex}
        order by blog.updated_at desc
        limit ${offset}, #{limit}
    </select>
    <select id="countBlog" resultType="int">
        SELECT count(*) FROM blog
        <if test="user_id != null">
            WHERE user_id = #{userId}
        </if>
    </select>

    <insert id="insertBlog" parameterType="hello.entity.Blog" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO blog (user_id, title, description, content, at_index, created_at, updated_at)
        VALUES (#{userId}, #{title}, #{description}, #{content}, #{atIndex}, now(), now())
    </insert>

    <update id="updateBlog" parameterType="hello.entity.Blog">
        UPDATE blog
        SET title       = #{title},
            content     = #{content},
            description = #{description},
            updated_at  = now(),
            at_Index = #{atIndex}
        WHERE id = #{id}
    </update>

    <select id="selectBlogById" resultMap="blog">
        SELECT blog.id          as blog_id,
               blog.title       as blog_title,
               blog.description as blog_description,
               blog.content     as blog_content,
               blog.updated_at  as blog_updated_at,
               blog.created_at  as blog_created_at,
               blog.at_index as blog_at_index,
               user.id          as user_id,
               user.username    as user_username,
               user.avatar      as user_avatar,
               user.updated_at  as user_updated_at,
               user.created_at  as user_created_at
        FROM blog
                 LEFT OUTER JOIN user
                                 ON blog.user_id = user.id
        WHERE blog.id = #{id}
    </select>

    <delete id="deleteBlog" parameterType="int">
        DELETE
        FROM blog
        WHERE id = #{id}
    </delete>

    <resultMap id="blog" type="hello.entity.Blog">
        <id property="id" column="blog_id"/>
        <result property="title" column="blog_title"/>
        <result property="description" column="blog_description"/>
        <result property="content" column="blog_content"/>
        <result property="atIndex" column="blog_at_index"/>
        <result property="updatedAt" column="blog_updated_at"/>
        <result property="createdAt" column="blog_created_at"/>
        <association property="user" javaType="hello.entity.User">
            <id property="id" column="user_id"/>
            <result property="username" column="user_username"/>
            <result property="avatar" column="user_avatar"/>
            <result property="updatedAt" column="user_updated_at"/>
            <result property="createdAt" column="user_created_at"/>
        </association>
    </resultMap>
</mapper>